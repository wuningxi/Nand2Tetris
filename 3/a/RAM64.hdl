// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Split address into two parts: Use 1st part of address to choose correct register block, 2nd part to choose register
    DMux8Way(in=load,sel=address[3..5],a=load0,b=load1,c=load2,d=load3,e=load4,f=load5,g=load6,h=load7); 

    // Using 8 RAM blocks (with 8 registers each) - each address has 3 bits
    RAM8(in=in,load=load0,address=address[0..2],out=regblock0);
    RAM8(in=in,load=load1,address=address[0..2],out=regblock1);
    RAM8(in=in,load=load2,address=address[0..2],out=regblock2);
    RAM8(in=in,load=load3,address=address[0..2],out=regblock3);
    RAM8(in=in,load=load4,address=address[0..2],out=regblock4);
    RAM8(in=in,load=load5,address=address[0..2],out=regblock5);
    RAM8(in=in,load=load6,address=address[0..2],out=regblock6);
    RAM8(in=in,load=load7,address=address[0..2],out=regblock7);

    Mux8Way16(a=regblock0,b=regblock1,c=regblock2,d=regblock3,e=regblock4,f=regblock5,g=regblock6,h=regblock7,sel=address[3..5],out=out);
}
